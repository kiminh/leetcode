project(alg)
cmake_minimum_required(VERSION 2.8)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb -std=c++17 -fno-strict-aliasing -Wno-register")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -std=c++17 -fno-strict-aliasing -Wno-register")
set(CMAKE_BUILD_TYPE "Debug")
include_directories("${PROJECT_SOURCE_DIR}/include")
find_package(Boost REQUIRED COMPONENTS log)
if(NOT Boost_FOUND)
    message("Can not find Boost")
endif()
add_definitions(-DBOOST_SPIRIT_THREADSAFE)
add_definitions(-DBOOST_ALL_DYN_LINK)
add_definitions(-D_DEBUG)
include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})
include_directories("${PROJECT_SOURCE_DIR}/common/util/include")
include_directories("${PROJECT_SOURCE_DIR}/alg/include")
set(SRCS
"${PROJECT_SOURCE_DIR}/common/util/src/log.cpp" 
)

add_executable(94 ${SRCS} "${PROJECT_SOURCE_DIR}/94.Binary_Tree_Inorder_Traversal/solution.cpp")
target_link_libraries(94 boost_log-mt)
add_executable(102 ${SRCS} "${PROJECT_SOURCE_DIR}/102.Binary_Tree_Level_Order_Traversal/solution.cpp")
target_link_libraries(102 boost_log-mt)
add_executable(105 ${SRCS} "${PROJECT_SOURCE_DIR}/105._Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal/solution.cpp")
target_link_libraries(105 boost_log-mt)
add_executable(106 ${SRCS} "${PROJECT_SOURCE_DIR}/106.Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal/solution.cpp")
target_link_libraries(106 boost_log-mt)
add_executable(173 ${SRCS} "${PROJECT_SOURCE_DIR}/173.Binary_Search_Tree_Iterator/solution.cpp")
target_link_libraries(173 boost_log-mt)
add_executable(1305 ${SRCS} "${PROJECT_SOURCE_DIR}/1305.All_Elements_in_Two_Binary_Search_Trees/solution.cpp")
target_link_libraries(1305 boost_log-mt)
add_executable(129 ${SRCS} "${PROJECT_SOURCE_DIR}/129.Sum_Root_to_Leaf_Numbers/solution.cpp")
target_link_libraries(129 boost_log-mt)
add_executable(98 ${SRCS} "${PROJECT_SOURCE_DIR}/98.Validate_Binary_Search_Tree/solution.cpp")
target_link_libraries(98 boost_log-mt)
add_executable(133 ${SRCS} "${PROJECT_SOURCE_DIR}/113.Path_Sum_II/solution.cpp")
target_link_libraries(133 boost_log-mt)
add_executable(144 ${SRCS} "${PROJECT_SOURCE_DIR}/144.Binary_Tree_Preorder_Traversal/solution.cpp")
target_link_libraries(144 boost_log-mt)
add_executable(199 ${SRCS} "${PROJECT_SOURCE_DIR}/199.Binary_Tree_Right_Side_View/solution.cpp")
target_link_libraries(199 boost_log-mt)
add_executable(114 ${SRCS} "${PROJECT_SOURCE_DIR}/114.Flatten_Binary_Tree_to_Linked_List/solution.cpp")
target_link_libraries(114 boost_log-mt)
add_executable(222 ${SRCS} "${PROJECT_SOURCE_DIR}/222.Count_Complete_Tree_Nodes/solution.cpp")
target_link_libraries(222 boost_log-mt)
add_executable(116 ${SRCS} "${PROJECT_SOURCE_DIR}/116.Populating_Next_Right_Pointers_in_Each_Node/solution.cpp")
target_link_libraries(116 boost_log-mt)
add_executable(236 ${SRCS} "${PROJECT_SOURCE_DIR}/236.Lowest_Common_Ancestor_of_a_Binary_Tree/solution.cpp")
target_link_libraries(236 boost_log-mt)
add_executable(101 ${SRCS} "${PROJECT_SOURCE_DIR}/101.Symmetric_Tree/solution.cpp")
target_link_libraries(101 boost_log-mt)
add_executable(104 ${SRCS} "${PROJECT_SOURCE_DIR}/104.Maximum_Depth_of_Binary_Tree/solution.cpp")
target_link_libraries(104 boost_log-mt)
add_executable(230 ${SRCS} "${PROJECT_SOURCE_DIR}/230.Kth_Smallest_Element_in_a_BST/solution.cpp")
target_link_libraries(230 boost_log-mt)
add_executable(508 ${SRCS} "${PROJECT_SOURCE_DIR}/508.Most_Frequent_Subtree_Sum/solution.cpp")
target_link_libraries(508 boost_log-mt)
add_executable(138 ${SRCS} "${PROJECT_SOURCE_DIR}/138.Copy_List_with_Random_Pointer/solution.cpp")
target_link_libraries(138 boost_log-mt)
add_executable(187 ${SRCS} "${PROJECT_SOURCE_DIR}/187.Repeated_DNA_Sequences/solution.cpp")
target_link_libraries(187 boost_log-mt)
add_executable(187-bitmap ${SRCS} "${PROJECT_SOURCE_DIR}/187.Repeated_DNA_Sequences/solution2.cpp")
target_link_libraries(187-bitmap boost_log-mt)
add_executable(78 ${SRCS} "${PROJECT_SOURCE_DIR}/78.Subsets/solution.cpp")
target_link_libraries(78 boost_log-mt)
add_executable(155 ${SRCS} "${PROJECT_SOURCE_DIR}/155.Min_Stack/solution.cpp")
target_link_libraries(155 boost_log-mt)
add_executable(211 ${SRCS} "${PROJECT_SOURCE_DIR}/211.Add_and_Search_Word-Data_structure_design/solution.cpp")
target_link_libraries(211 boost_log-mt)
add_executable(225 ${SRCS} "${PROJECT_SOURCE_DIR}/225.Implement_Stack_using_Queues/solution.cpp")
target_link_libraries(225 boost_log-mt)
add_executable(232 ${SRCS} "${PROJECT_SOURCE_DIR}/232.Implement_Queue_using_Stacks/solution.cpp")
target_link_libraries(232 boost_log-mt)
add_executable(380 ${SRCS} "${PROJECT_SOURCE_DIR}/380.Insert_Delete_GetRandom_O(1)/solution.cpp")
target_link_libraries(380 boost_log-mt)
add_executable(jump_stone ${SRCS} "${PROJECT_SOURCE_DIR}/jump_stone/solution.cpp")
target_link_libraries(jump_stone boost_log-mt)
add_executable(jump_stone_2 ${SRCS} "${PROJECT_SOURCE_DIR}/jump_stone/solution2.cpp")
target_link_libraries(jump_stone_2 boost_log-mt)
add_executable(14 ${SRCS} "${PROJECT_SOURCE_DIR}/14.Longest_Common_Prefix/solution.cpp")
target_link_libraries(14 boost_log-mt)
add_executable(147 ${SRCS} "${PROJECT_SOURCE_DIR}/147.Insertion_Sort_List/solution.cpp")
target_link_libraries(147 boost_log-mt)
add_executable(179 ${SRCS} "${PROJECT_SOURCE_DIR}/179.Largest_Number/solution.cpp")
target_link_libraries(179 boost_log-mt)
add_executable(524 ${SRCS} "${PROJECT_SOURCE_DIR}/524.Longest_Word_in_Dictionary_through_Deleting/solution.cpp")
target_link_libraries(524 boost_log-mt)
add_executable(1353 ${SRCS} "${PROJECT_SOURCE_DIR}/1353.Maximum_Number_of_Events_That_Can_Be_Attended/solution.cpp")
target_link_libraries(1353 boost_log-mt)
add_executable(1353-2 ${SRCS} "${PROJECT_SOURCE_DIR}/1353.Maximum_Number_of_Events_That_Can_Be_Attended/solution2.cpp")
target_link_libraries(1353-2 boost_log-mt)
add_executable(55 ${SRCS} "${PROJECT_SOURCE_DIR}/55.Jump_Game/solution.cpp")
target_link_libraries(55 boost_log-mt)
add_executable(121 ${SRCS} "${PROJECT_SOURCE_DIR}/121.Best_Time_to_Buy_and_Sell_Stock/solution.cpp")
target_link_libraries(121 boost_log-mt)
add_executable(64 ${SRCS} "${PROJECT_SOURCE_DIR}/64.Minimum_Path_Sum/solution.cpp")
target_link_libraries(64 boost_log-mt)
add_executable(91 ${SRCS} "${PROJECT_SOURCE_DIR}/91.Decode_Ways/solution.cpp")
target_link_libraries(91 boost_log-mt)
add_executable(120 ${SRCS} "${PROJECT_SOURCE_DIR}/120.Triangle/solution.cpp")
target_link_libraries(120 boost_log-mt)
add_executable(343 ${SRCS} "${PROJECT_SOURCE_DIR}/343.Integer_Break/solution.cpp")
target_link_libraries(343 boost_log-mt)
add_executable(189 ${SRCS} "${PROJECT_SOURCE_DIR}/198.House_Robber/solution.cpp")
target_link_libraries(189 boost_log-mt)
add_executable(213 ${SRCS} "${PROJECT_SOURCE_DIR}/213.House_Robber_II/solution.cpp")
target_link_libraries(213 boost_log-mt)